#  本题是一道数学思维题, 需要找到将x拆分为x = q1 ^ y1 * q2 ^ y2的本质
#  由唯一分解定理, x = p1 ^ k1 * p2 ^ k2 * ... * pn ^ kn, 即x必然能分解成若干个质因子的幂次之和
#  此外我们还知道, 任意一个大于1的数都可以分解成若干个2和3的和
#  因此可以用分解质因子的思想, 先分解质因子再讨论它们的幂次能否合并成2k1 + 3k2的形式
#  假设x的质因子列表为(p1, k1), (p1, k2), ..., (pn, kn), 前者为因子后者为幂次
#  可以发现对于每个质因子p, 只要其幂次k大于1, 就一定能表示成k = 2k1 + 3k2的形式(可自行举例验证)
#  然后将k1的部分合并到y1中, k2的部分合并到y2中, 即符合题意
#  若某个质因子的幂次为1, 则无法进行如上合并, 即不符合题意
#  此外还要注意x本身是平方数或立方数, 必然符合题意(y2=1
# 即可)
#  例: x = 2 ^ 2 * 3 ^ 5 * 7 ^ 8, 则2 = 2 * 1 + 3 * 0(k1=1, k2=0), 5 = 2 * 1 + 3 * 1(k1=1, k2=1), 8 = 2 * 4 + 3 * 0(k1=4, k2=0)
#  则可分解为x = (2 * 3 * 7 ^ 4) ^ 2 * 3 ^ 1, 即x1 = (2 * 3 * 7 ^ 4), x2 = 3, y1 = 2, y2 = 1, 符合题意

# 选择4000理由如下
# 设质数x>4000;
# 4000^5>10^18→x^5>10^18→所以只用考虑x、x^2、x^3、x^4，其中x不符合题目条件;
# 因此对于4000以上只用考虑平方与立方；
# 将a_i除去4000以下的质因子时，除得的商要么是1要么就得包含4000以上的质因子；
# 判断商是否是立方数或者平方数，若是，则4000以上的质因子符合题目条件。

# 一个数可以被分解为多个素数的乘积,所以x1和x2也可以是多个素数乘出来的，所以每个素数的次方至少需要时2及以上
is_prime = [True] * 4010
prime = []
# 预处理4000以内的素数
for i in range(2, 4001):
    if is_prime[i]:
        prime.append(i)
        for j in range(i * i, 4001, i):
            is_prime[j] = False


# 判断平方数
def square(x):
    y = int(x ** 0.5)
    return y * y == x or (y + 1) * (y + 1) == x


# 判断立方数
def cubic(x):
    y = int(x ** (1 / 3))
    return y ** 3 == x or (y + 1) ** 3 == x


t = int(input())
for i in range(t):
    a = int(input())
    # 先特判平方数和立方数
    if square(a) or cubic(a):
        print("yes")
        continue
    flag = True
    # 枚举4000 以内的素因子
    for i in prime:
        if a % i == 0:
            mi = 0
            while a % i == 0:
                a //= i
                mi += 1
            # 幂次项必须大于1
            if mi == 1:
                flag = False
                break
    if flag and (square(a) or cubic(a)):
        print("yes")
    else:
        print("no")
